package utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.hamcrest.core.Is.is;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import controllers.PacemakerAPI;
import models.Activity;
import models.Location;
import models.User;

public class MySqlUtilsTest {
	
	PacemakerAPI pacemaker;
	
	String expectedString = String.join(System.getProperty("line.separator")
			,"DROP DATABASE IF EXISTS pacemaker;"
			,"CREATE DATABASE pacemaker;"
			,"USE pacemaker;"
			,"SET SQL_MODE = 'NO_AUTO_VALUE_ON_ZERO';"
			,"CREATE TABLE `user` ( `id` BIGINT NOT NULL AUTO_INCREMENT, `firstname` VARCHAR(255), `lastname` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), PRIMARY KEY  (`id`));"
			,"CREATE TABLE `activity` ( `id` BIGINT NOT NULL AUTO_INCREMENT, `user_id` BIGINT, `type` VARCHAR(255), `location` VARCHAR(255), `distance` DOUBLE, `date` DATETIME, `duration` VARCHAR(255), PRIMARY KEY  (`id`));"
			,"CREATE TABLE `location` ( `id` BIGINT NOT NULL AUTO_INCREMENT, `activity_id` BIGINT, `latitude` DOUBLE, `longitude` DOUBLE, PRIMARY KEY  (`id`));"
			,"ALTER TABLE `activity` ADD CONSTRAINT `activity_fk1` FOREIGN KEY (`user_id`) REFERENCES user(`id`);"
			,"ALTER TABLE `location` ADD CONSTRAINT `location_fk1` FOREIGN KEY (`activity_id`) REFERENCES activity(`id`);"
			,"INSERT INTO USER (ID,FIRSTNAME,LASTNAME,EMAIL,PASSWORD) VALUES(0,'bruce','wayne','bw@gotham.com','secret');"
			,"INSERT INTO ACTIVITY (ID,TYPE,LOCATION,DISTANCE,DATE,DURATION,USER_ID) VALUES(0,'walk','shop',5.5,'1999-04-23 10:50:10','1:22:12',0);"
			,"INSERT INTO LOCATION (ID,LATITUDE,LONGITUDE,ACTIVITY_ID) VALUES(0,24.4,35.5,0);"
			,"INSERT INTO LOCATION (ID,LATITUDE,LONGITUDE,ACTIVITY_ID) VALUES(1,24.6,39.5,0);"
			,"INSERT INTO USER (ID,FIRSTNAME,LASTNAME,EMAIL,PASSWORD) VALUES(1,'tony','stark','im@marvel.com','secret');"
			,"INSERT INTO ACTIVITY (ID,TYPE,LOCATION,DISTANCE,DATE,DURATION,USER_ID) VALUES(1,'fly','school',5.15,'1999-04-23 10:50:10','3:22:12',1);"
			,"INSERT INTO LOCATION (ID,LATITUDE,LONGITUDE,ACTIVITY_ID) VALUES(2,25.4,55.5,1);"
			,"INSERT INTO LOCATION (ID,LATITUDE,LONGITUDE,ACTIVITY_ID) VALUES(3,25.8,55.9,1);"
	);


	@Before
	public void setUp() throws Exception {
		User.counter = new Long(0);
		Activity.counter = new Long(0);
		Location.counter = new Long(0);
		pacemaker = new PacemakerAPI(new XMLSerializer());
		User bw = pacemaker.createUser("bruce", "wayne", "bw@gotham.com", "secret");
		User ts = pacemaker.createUser("tony", "stark", "im@marvel.com", "secret");
		Activity walk = pacemaker.createActivity(bw.id, "walk", "shop", 5.5, 
				DateTimeUtils.convertStringToLocalDateTime("23:04:1999 10:50:10"), 
				DateTimeUtils.convertStringToDuration("1:22:12"));
		Activity fly = pacemaker.createActivity(ts.id, "fly", "school", 5.15, 
				DateTimeUtils.convertStringToLocalDateTime("23:04:1999 10:50:10"), 
				DateTimeUtils.convertStringToDuration("3:22:12"));
		pacemaker.addLocation(walk.id, 24.4, 35.5);
		pacemaker.addLocation(walk.id, 24.6, 39.5);
		pacemaker.addLocation(fly.id, 25.4, 55.5);
		pacemaker.addLocation(fly.id, 25.8, 55.9);
	}

	@After
	public void tearDown() throws Exception {
		deleteFile("pacemaker.sql");
		deleteFile("pacemaker_test.sql");
	}
	
	public void writeToTestFile(String contents) {
		try {
			PrintWriter writer = new PrintWriter(new FileWriter("pacemaker_test.sql", false));
			writer.println(contents);
			writer.close();
		}
		catch (IOException ex) {
			System.out.println("IOEXCEPTION");
		}

	}
	
	void deleteFile(String fileName) {
		File f = new File(fileName);
		if (f.exists()) {
			f.delete();
		}
	}
	
	@Test
	public void testScriptText(){
		String actualString = MySqlUtils.createPacemakerScript(pacemaker.getUsers());
		assertThat(actualString, is(expectedString));
	}
	

	@Test
	public void testScriptFile() throws IOException {
		MySqlUtils.writeToFile(pacemaker.getUsers());
		writeToTestFile(expectedString);

		String autoGeneratedFile = new String(Files.readAllBytes(Paths.get("pacemaker.sql")), StandardCharsets.UTF_8);
		String manualGeneratedFile = new String(Files.readAllBytes(Paths.get("pacemaker_test.sql")), StandardCharsets.UTF_8);

		assertThat(autoGeneratedFile, is(manualGeneratedFile));
	}

}
